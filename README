+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
|           The Meaning of the Improper List Types in Erlang           |
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+

An improper list is a chain of cons cells, not terminated by [].
   ~~~~~~~~~~~~~

When writing types and function specifications, the following types are
defined under Types and Function Specifications [1] in the Erlang
Reference Manual:

  * maybe_improper_list(Type1, Type2)
  * nonempty_improper_list(Type1, Type2)
  * nonempty_maybe_improper_list(Type1, Type2)

"where the last two types define the set of Erlang terms one would
expect."  (Type1 is the contents and Type2 is the termination.)

It turns out that what one would expect is not what another one would
expect.  Multiple suggestions of what these types represent have been
presented.

So what do they represent?  Does "maybe" refer to the being a list or to
being improper?  Why is there no plain improper_list(Type1, Type2)?

+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
| Experiment using TypEr                                               |
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+

TypEr is included in the Dialyzer application in OTP.  The idea is to
write some functions without type specifications and use TypEr to give
them types.

    -module(type_me).

    -export([f1/1, f2/1, f3/1, f4/1]).

    f1(N) when N > 1  -> tail;
    f1(N)             -> [head | f1(N + 1)].

    f2(X) when X >= 2 -> [head];
    f2(X) when X <  2 -> [head | tail].

    f3(X) when X >  3 -> [];
    f3(X) when X == 3 -> [head | tail];
    f3(X) when X <  3 -> [head | f3(X + 2)].

    f4(_) -> [head | tail].

Run typer.  I used TypEr version v3.3.1, included in Erlang/OTP 21.

    $ /usr/lib/erlang/bin/typer type_me.erl

    %% File: "type_me.erl"
    %% -------------------
    -spec f1(_) -> 'tail' | nonempty_improper_list('head','tail').
    -spec f2(_) -> nonempty_maybe_improper_list('head','tail' | []).
    -spec f3(_) -> maybe_improper_list('head','tail' | []).
    -spec f4(_) -> nonempty_improper_list('head','tail').

+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
| Concluions                                                           |
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+

1. A bare non-[] termination value (Type2 in the defintions above, here
   'tail') is not a value in any of the improper list types.  Hence, the
   union result type of f1.
2. Whenever [] is a possible but not the only termination, the list type
   is a maybe improper list and [] is always included as a valid
   termination.
3. The following seem to hold (where [] is not in Type2):

    nonempty_maybe_improper_list(Type1, Type2 | []) =
        nonempty_list(Type1) | nonempty_improper_list(Type1, Type2).

    maybe_improper_list(Type1, Type2 | []) =
        list(Type1) | nonempty_improper_list(Type1, Type2).

+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
| Future work                                                          |
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+

Negative tests. Write some function with function specification and try
to provoke dialyzer to report errors for them.

[1]: http://erlang.org/doc/reference_manual/typespec.html
